Team Number 7
ID: 
Ryan Brounley 



This file is intended as an overview of the structure of our B+ tree and 
a run through of the various function that have to be implemented in high
level psuedocode.

--- Structure of B+ tree as a whole ---

Each node of the of the tree will be represented as a page. These pages will 
be "connected" in order to form this tree strutture. These connections however
will not be made through literal pointers, instead each page will have an integer
value written into the front beginning of its memory --(pages are represented by
void* chunks of memory thus the first 4 bytes will be where this values lies)-- this 
value will represent the page's number. On the next 4 bytes we will either have a 0 or 1
depending on whether the node is a leaf or not. After these bytes we have the next four bytes
represent the number of child nodes(pages). Lets call this amount of children 'x'
then the next '4 * x' bytes will be the page numbers of the corresponding children.
Finally we will have an int that will be either 0,1,2,3 where these represent

0 = not written to
1 = int
2 = Real 
3 = VarChar

followed by the key value itself.
Thus if we have a root node, or page, whos page number is 1 and which has 
two children with page numbers 2 and 3 and a key value of "key", our page would look like this..

 _____________________
| 1 | 0 | 32 | 52 |72 | ----> | page # | leaf? | # of Children | 1st child location | 2nd child location |
| 3 | "key" |         | ----> | data type | entry 1 | next entries... |
|                     |
|                     |
|                     |
|                     |
|                     |
|                     |
|                     |
|_____________________|

This entire layout will be contained within a single file, thus each newly created
IXfile will have a single B+ tree residing within it.

In addition to the tree of pages itself, we will also have a seperate MetaData page
that contains the current root node page number. The page number of this page will
always be zero. It should also be noted here that this means that the root node can 
and most likely will change with insertions.


--- Functions ---

- createFile: 

In this function we create an instance of a file through pfm's create file method.
Additionally we also create and intialize our MetaData page, root node/page and 
first leaf. Finally we append these pages to the our file and thus our inital 
tree has been made.

- destroyFile

In this function we free all the memory that has been allocated on our file going 
through each node and freeing the memory accordingly. Finally pfm's destroyFile is called.

- openFile

This function opens a file with an ixFileHandle for subsequent manipulation. 

- closeFile

This function closes a file using a file handle to prevent further maniupulation. 

- insertEntry

This function inserts an entry into an existing leaf/slot. It is done by evaluating one of two cases: the first being is when no insertions have been made previously in the B + tree, in which ccase the key is inserted into the root node, and the first leaf is made. The info for this first node is stored in that leaf. The second case first evaluates what type of info we are trying to store, finds the current root page and reads it from the file handle, and then it branches out to another function called recursive insert. At this point, the recursive funciton looks through each entry and finds the one that the insertion should be placed in between. At this point we move down one level to the right child of the previous node. We then check to see if this page is a leaf, using the indicator on bytes 4-8 of the page. If it is a leaf, we use a compare keys method to find at which place we should insertt it. We then call sort page in order to fully sort the indexes on the page. If the page is not a leaf, we read in that page and call recursive insert once more and use that page as an argument.  
 
- deleteEntry

This function deletes a leaf level node by traversing through the tree's non-leaf entries, using our compare method to go left or right down the different levels of the tree. Once a leaf node is reached, the amount of siblings on the page are counted and if sufficient, the leaf is removed and the changed fields are updated. 

-treeVersal

This function is a lookup function that recursively traverses the B+ tree to a leaf node that contains the information required by the index passed in. 

- scan 
 Scan goes to the first leaf qualified for the lowKey and uses the getNext() in the ScanIterator to go through all of the leaves until it fails at the highKey level. It uses two helper functions to acheive this, we commented the code thoroughly


- printBtree

We did not get to finishing print B Tree
