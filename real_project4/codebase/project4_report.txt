1. Basic information
Team number (e.g., 01) : 
#1 Student ID : 1360510
#1 Student Name : Jonathan Balasingham
#2 Student ID : 1360826 
#2 Student Name : Ryan Brounley
#3 Student ID : 1322145
#3 Student Name : Steven Rodriguez


2. Catalog information about Index
- Show what catalog information you store for an index. 
First and foremost we needed to store the names of the attributes we were working with. 

3. Index Nested Loop Join
- INLJoin is constructed with a Iterator and an IndexScan. Since we are only implementing for the equals, I ignored the condition (and hardcoded the loop to check for equals). 

-getNextTuple() keeps track of two loops (inner and outer) and returns tuples that equal within each other. I modeled the method off the below pseudocode. It uses an index on the inner loop and not on the outer. So I set up the iterator on the outside loop and the IndexScan for the inner. I made nested while loops to hit every value and when the tuple equals, I set the value of data to be the attributes of the two inputs.
	- foreach tuple r in R do Use Index on S
		foreach tuple s in S where ri == sj do
				add <r, s> to result

-getAttributes() just gets the attributes for both iterators through their wrapper functions of getAttributes() and returns an array of both of them. This returns all the attributes of the data set.

4. Implementation Detail
- Have you added your own source file (.cc or .h)?
  No we did not.

- Have you implemented any optional features? Then, describe them here.

- Other implementation details:


  Filter: 
  
    Here i will go through the implementations features of the filter class.
    
    Constructor:
    Ive added an iterator, vector and Comparison fields to the Filter class to assist in holding information.
    All the constructor does is intitlize the firsst two of these fields, the third will be filled later.
    
    getNextTuple:
    I implemented this function recursively since most of it could be  partitioned into a single helper function.
    In this case that helper function is called verify, as the name suggests
    
    getAttributes:
    outsources the work to the Iterator class, isnt really used since we intitlize with constructor.
    
  Project:
  
    Constructor: 
    Simple constructor that assigns arguments to field variables. 
    
    getNextTuple:
    
    
    getAttributes:
    Takes in an empty vector that will be the projection of the field vector of Project and the corresponding vector of the input data. 
    A nested for loop compares each individual element of one vector with all equivalent elements of the other vector. 

5. Other (optional)

*******************************************IMPORTANT*******************************:

We could not figure out how to fix the compilation issues from qetest_05 and beyond. We tried everything that fixed the 
previous undefined reference problems and nothing worked. Everything was added to the makefile, order was changed around so
the dependencies were properly configured, the correct codebase was downloaded too, we even change where the class 
was located and nothing seemed to work. 

we decided it would be better to try to write out the implementation to hopefully try to get as much credit as possible. 
Unfortunately, without tests we couldnt verify our code to be correct, (it probably isnt since there were a multitude of
bugs within the the making of the first 4 tests that do work).
With that being said, please have mercy. 




